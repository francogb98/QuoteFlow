import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

async function main() {
  console.log("üå± Iniciando seed de la base de datos...");

  // 1. Crear c√≥digos promocionales
  console.log("üìù Creando c√≥digos promocionales...");
  const codigosPromocionales = await Promise.all([
    prisma.codigoPromocional.create({
      data: {
        codigo: "PRUEBA2024",
        duracionMeses: 2,
        estaActivo: true,
        fechaExpiracion: new Date("2024-12-31"),
      },
    }),
    prisma.codigoPromocional.create({
      data: {
        codigo: "DESCUENTO50",
        duracionMeses: 3,
        estaActivo: true,
        fechaExpiracion: new Date("2024-11-30"),
      },
    }),
    prisma.codigoPromocional.create({
      data: {
        codigo: "GIMNASIO2024",
        duracionMeses: 1,
        estaActivo: true,
        fechaExpiracion: new Date("2024-10-31"),
      },
    }),
    prisma.codigoPromocional.create({
      data: {
        codigo: "VERANO2024",
        duracionMeses: 4,
        estaActivo: true,
        fechaExpiracion: new Date("2024-09-30"),
      },
    }),
    prisma.codigoPromocional.create({
      data: {
        codigo: "FITNESS2024",
        duracionMeses: 2,
        estaActivo: true,
        fechaExpiracion: new Date("2024-12-15"),
      },
    }),
    prisma.codigoPromocional.create({
      data: {
        codigo: "PROMO30",
        duracionMeses: 1,
        estaActivo: false, // C√≥digo inactivo
        fechaExpiracion: new Date("2024-08-31"),
      },
    }),
    prisma.codigoPromocional.create({
      data: {
        codigo: "NUEVOCLIENTE",
        duracionMeses: 2,
        estaActivo: true,
        fechaExpiracion: new Date("2025-01-31"),
      },
    }),
    prisma.codigoPromocional.create({
      data: {
        codigo: "BLACKFRIDAY",
        duracionMeses: 6,
        estaActivo: true,
        fechaExpiracion: new Date("2024-11-29"),
      },
    }),
    prisma.codigoPromocional.create({
      data: {
        codigo: "ANIVERSARIO",
        duracionMeses: 3,
        estaActivo: true,
        fechaExpiracion: new Date("2025-03-31"),
      },
    }),
    prisma.codigoPromocional.create({
      data: {
        codigo: "ESTUDIANTE2024",
        duracionMeses: 12,
        estaActivo: true,
        fechaExpiracion: new Date("2024-12-31"),
      },
    }),
  ]);

  console.log(
    `‚úÖ Creados ${codigosPromocionales.length} c√≥digos promocionales`
  );

  // 2. Crear empresa
  console.log("üè¢ Creando empresa...");
  const empresa = await prisma.empresa.create({
    data: {
      nombre: "Gimnasio-FitMax",
      planTipo: "PRO",
      estadoPago: "ACTIVO",
      frecuenciaPago: "MENSUAL",
      fechaUltimoPago: new Date("2024-07-01"),
      fechaProximoVencimiento: new Date("2024-08-01"),
      estaActiva: true,
      esCuentaPrueba: false,
      codigoPromocionalId: codigosPromocionales[0].id, // Usar el primer c√≥digo promocional
    },
  });

  console.log(`‚úÖ Empresa creada: ${empresa.nombre}`);

  // 3. Crear administrador
  console.log("üë§ Creando administrador...");
  const hashedPassword = await bcrypt.hash("admin123", 10);

  const administrador = await prisma.administrador.create({
    data: {
      nombre: "Carlos Rodriguez",
      documento: "12345678",
      email: "admin@fitmax.com",
      password: hashedPassword,
      telefono: "+54911234567",
      rol: "ADMINISTRADOR",
      estaActivo: true,
      empresaId: empresa.id,
      claveMercadoPago: "TEST-1234567890",
    },
  });

  console.log(`‚úÖ Administrador creado: ${administrador.nombre}`);

  // 4. Crear configuraci√≥n de tarifa
  console.log("üí∞ Creando configuraci√≥n de tarifa...");
  const configuracionTarifa = await prisma.configuracionTarifa.create({
    data: {
      administradorId: administrador.id,
      estaActiva: true,
      rangos: {
        create: [
          {
            diaInicio: 1,
            diaFin: 10,
            monto: 15000,
          },
          {
            diaInicio: 11,
            diaFin: 20,
            monto: 18000,
          },
          {
            diaInicio: 21,
            diaFin: 31,
            monto: 20000,
          },
        ],
      },
    },
  });

  console.log("‚úÖ Configuraci√≥n de tarifa creada");

  // 5. Crear usuarios
  console.log("üë• Creando usuarios...");
  const nombres = [
    "Ana Garc√≠a",
    "Luis Mart√≠nez",
    "Mar√≠a L√≥pez",
    "Juan P√©rez",
    "Carmen Ruiz",
    "Pedro S√°nchez",
    "Laura Fern√°ndez",
    "Miguel Torres",
    "Isabel Moreno",
    "David Jim√©nez",
    "Elena Vargas",
    "Roberto Silva",
    "Patricia Herrera",
    "Fernando Castro",
    "M√≥nica Ortega",
    "Alejandro Ramos",
    "Cristina Delgado",
    "Javier Molina",
    "Beatriz Guerrero",
    "Andr√©s Medina",
    "Luc√≠a Romero",
    "Sergio Navarro",
    "Pilar Dom√≠nguez",
    "Ra√∫l V√°zquez",
    "Natalia Aguilar",
  ];

  const usuarios = [];
  for (let i = 0; i < 25; i++) {
    const usuario = await prisma.usuario.create({
      data: {
        nombre: nombres[i].split(" ")[0],
        apellido: nombres[i].split(" ")[1],
        documento: `2000000${i.toString().padStart(2, "0")}`,
        telefono: `+5491123456${i.toString().padStart(2, "0")}`,
        edad: Math.floor(Math.random() * 40) + 18, // Edad entre 18 y 58
        estado: Math.random() > 0.1 ? "ACTIVO" : "INACTIVO", // 90% activos
        administradorId: administrador.id,
        estaActivo: true,
      },
    });
    usuarios.push(usuario);
  }

  console.log(`‚úÖ Creados ${usuarios.length} usuarios`);

  // 6. Crear pagos para cada usuario
  console.log("üí≥ Creando pagos...");
  const metodosDisponibles = [
    "EFECTIVO",
    "MERCADOPAGO",
    "TRANSFERENCIA",
    "TARJETA",
  ];
  const estadosDisponibles = ["PAGADO", "PENDIENTE", "VENCIDO"];

  let totalPagos = 0;
  for (const usuario of usuarios) {
    // Crear 5 pagos por usuario
    for (let i = 0; i < 5; i++) {
      const fechaBase = new Date();
      fechaBase.setMonth(fechaBase.getMonth() - i); // Pagos de los √∫ltimos 5 meses

      const mes = fechaBase.getMonth() + 1;
      const a√±o = fechaBase.getFullYear();
      const periodo = `${a√±o}-${mes.toString().padStart(2, "0")}`;

      // Determinar monto basado en el d√≠a del mes
      const dia = Math.floor(Math.random() * 31) + 1;
      let monto = 15000; // Por defecto
      if (dia >= 1 && dia <= 10) monto = 15000;
      else if (dia >= 11 && dia <= 20) monto = 18000;
      else monto = 20000;

      // Agregar variaci√≥n aleatoria al monto
      monto += Math.floor(Math.random() * 2000) - 1000; // ¬±1000

      const estado =
        estadosDisponibles[
          Math.floor(Math.random() * estadosDisponibles.length)
        ];
      const metodo =
        metodosDisponibles[
          Math.floor(Math.random() * metodosDisponibles.length)
        ];

      await prisma.pago.create({
        data: {
          monto: monto,
          fecha: fechaBase,
          mes: mes,
          a√±o: a√±o,
          periodo: periodo,
          usuarioId: usuario.id,
          estado: estado as any,
          metodo: metodo as any,
          estaVencido: estado === "VENCIDO",
          comprobante:
            metodo === "MERCADOPAGO"
              ? `MP-${Math.random().toString(36).substr(2, 9)}`
              : null,
        },
      });
      totalPagos++;
    }
  }

  console.log(`‚úÖ Creados ${totalPagos} pagos`);

  // 7. Crear algunos logs de auditor√≠a
  console.log("üìã Creando logs de auditor√≠a...");
  const auditLogs = await Promise.all([
    prisma.auditLog.create({
      data: {
        action: "CREATE_USER",
        entityType: "USER",
        entityId: usuarios[0].id,
        details: `Usuario ${usuarios[0].nombre} ${usuarios[0].apellido} creado`,
        ipAddress: "192.168.1.100",
        userAgent:
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
        administradorId: administrador.id,
      },
    }),
    prisma.auditLog.create({
      data: {
        action: "UPDATE_MERCADOPAGO_TOKEN",
        entityType: "ADMIN",
        entityId: administrador.id,
        details: "Token de MercadoPago actualizado",
        ipAddress: "192.168.1.100",
        userAgent:
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
        administradorId: administrador.id,
      },
    }),
    prisma.auditLog.create({
      data: {
        action: "CREATE_PAYMENT",
        entityType: "PAYMENT",
        entityId: "payment-example-id",
        details: "Pago registrado por $18000",
        ipAddress: "192.168.1.101",
        userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X)",
        administradorId: administrador.id,
      },
    }),
  ]);

  console.log(`‚úÖ Creados ${auditLogs.length} logs de auditor√≠a`);

  // Resumen final
  console.log("\nüéâ Seed completado exitosamente!");
  console.log("üìä Resumen:");
  console.log(`   ‚Ä¢ 1 Empresa: ${empresa.nombre}`);
  console.log(`   ‚Ä¢ 1 Administrador: ${administrador.nombre}`);
  console.log(`   ‚Ä¢ ${usuarios.length} Usuarios`);
  console.log(`   ‚Ä¢ ${totalPagos} Pagos`);
  console.log(`   ‚Ä¢ ${codigosPromocionales.length} C√≥digos promocionales`);
  console.log(`   ‚Ä¢ ${auditLogs.length} Logs de auditor√≠a`);
  console.log(`   ‚Ä¢ 1 Configuraci√≥n de tarifa con 3 rangos`);
}

main()
  .catch((e) => {
    console.error("‚ùå Error durante el seed:", e);
    process.exit(1);
  })
  .finally(async () => {
    await prisma.$disconnect();
  });
